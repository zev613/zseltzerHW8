import random

class SlidingPuzzle:
    def __init__(self, rows, columns):
        self.row = rows
        self.col = columns
        self.current_board = []
        acc = 0
        for row in range(0, self.row):
            self.current_board.append([])
            for col in range(0, self.col):
                self.current_board[row].append(acc)
                acc += 1
        self.solved_board = self.current_board

    def displayPuzzle(self):
        current_line = ''
        for row in range(self.row):
            for col in range(self.col):
                if self.current_board[row][col] >= 10:
                    current_line += str(self.current_board[row][col]) + ' '
                else:
                    current_line += str(self.current_board[row][col]) + '  '
            print(current_line.rstrip())
            current_line = ''

    def move(self, row_index, col_index):
            for r in range(self.row):
                for c in range(self.col):
                    if self.current_board[r][c] == 0:
                        store_value = self.current_board[row_index][col_index]
                        self.current_board[row_index][col_index] = self.current_board[r][c]
                        self.current_board[r][c] = store_value

    def legalMoves(self):
        for r in range(self.row):
            for c in range(self.col):
                if self.current_board[r][c] == 0:
                    z_row = r
                    z_col = c
        moves = [(z_row - 1, z_col)]
        moves.append((z_row + 1, z_col))
        moves.append((z_row, z_col - 1))
        moves.append((z_row, z_col + 1))
        for item in moves:
            if item[0] < 0 or item[1] < 0:
                moves.remove(item)
            elif item[0] > len(self.current_board) or item[1] > len(self.current_board[0]):
                moves.remove(item)
        return moves

    def scramble(self, randomMoves):
        for i in range(randomMoves):
            thisMove = random.choice(self.legalMoves)
            self.move(thisMove[0], thisMove[1])

    def isSolved(self):
        if self.current_board == self.solved_board
            return True
        else:
            return False

The slidingpuzzle.py module has one class, and within the class there are six methods, __init__,  displayPuzzle, move, legalMoves, scramble and isSolved.
The __init__ function is the class constructor, and has two parameters, rows and columns.
It sets the row and col instance variables from the  parameters. To create the current_board instance variable, it then iterates for the number of rows and then columns, 
each time setting the value of that spot to an acc value that goes up by one each time. It then sets the solved_board instance variable to the result.
The displayPuzzle method only takes self as a parameter, as doees every other method. This method uses an accumulator string current_line to print each row of the puzzle as a new line. 
It iterates over the number of rows and columnns. It adds a single space if the value of that space is 20 or greater, and is therefore double digits. 
If it is a single digit integer it adds two spaces after integer. The move method takes three parameters, self, row_index and col_index. 
It starts by iterating over the number of rows and columns, to find the row and column index of zero. It then stores the integer at row_index and column_index to a temp storage variable. 
It puts the value at row_index and col_index where the zero was. It then sets the value at the zero's original row and col to the temp storage value. 
The legalMoves method iterates for row and col to find the zero. It then creates a list of the 4 spots around the zero. If the value of the row or the column is either zero or the last row or column, 
that move gets removed from the list because it is illegal. It then returns that list of moves. The scramble method takes randomMoves as a parameter. This method iterates for numberMoves, 
each time selecting a random choice from the legalMoves list, and then calling the move method with the row and col that was selected from the list. It does this for randomMoves number of times.
The final method is isSolved. This checks if the current_board instance variable is equal to the solved_board instance variable. It returns True or False depending on such.


To run the code:
python slidingpuzzle.py

